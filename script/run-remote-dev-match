#!/usr/bin/env python3
"""
A script to run a remote dev match.
"""

import os
import sys
import shutil
import argparse
import tempfile
import contextlib
import subprocess
from typing import Iterator
from pathlib import Path

REPO_ROOT = Path(__file__).resolve().parent.parent

sys.path.insert(1, str(REPO_ROOT / 'modules'))

import controller_utils  # isort:skip
from shared_utils import RobotType  # isort:skip


def get_zone_path(zone_id: int) -> Path:
    # All robot types have a common path so we just use the first enum option
    robot_file: Path = controller_utils.get_zone_robot_file_path(zone_id, RobotType.FORKLIFT)
    return robot_file.parent


@contextlib.contextmanager
def temporary_arena_root(suffix: str) -> Iterator[None]:
    original_arena_root = controller_utils.ARENA_ROOT
    with tempfile.TemporaryDirectory(suffix=suffix) as tmpdir_name:
        print(f"Using {tmpdir_name!r} as the arena")  # noqa:T001
        os.environ['ARENA_ROOT'] = tmpdir_name
        controller_utils.ARENA_ROOT = Path(tmpdir_name)
        try:
            yield
        finally:
            os.environ['ARENA_ROOT'] = str(original_arena_root)
            controller_utils.ARENA_ROOT = original_arena_root


def prepare_match(code_dir: Path) -> None:
    controller_utils.get_mode_file().write_text('remote-dev\n')

    # Copy the zone files into the right place
    for zone_id in [0, 1]:
        zone_path = get_zone_path(zone_id)
        zone_source = code_dir / f"zone-{zone_id}"
        if zone_source.is_dir():
            shutil.copytree(code_dir / f"zone-{zone_id}", zone_path)


def run_match() -> subprocess.CompletedProcess[str]:
    try:
        return subprocess.run([
            'webots',
            '--batch',
            '--stdout',
            '--stderr',
            '--minimize',
            '--mode=realtime',
            str(REPO_ROOT / 'worlds' / 'Arena.wbt'),
        ], stderr=subprocess.STDOUT, universal_newlines=True, stdout=subprocess.PIPE)
    except FileNotFoundError:
        print(  # noqa:T001
            "Could not find webots. Check that you have it installed and on your PATH",
        )
        exit(1)


def archive_match_outputs(
    code_dir: Path,
    completed_match: subprocess.CompletedProcess[str],
) -> None:
    """
    Copy the recordings and logs to the output directory.
    """

    output_dir = code_dir / "output" / controller_utils.get_filename_safe_identifier()
    output_dir.mkdir(exist_ok=True, parents=True)

    (output_dir / "logs.txt").write_text(completed_match.stdout)

    recording_dir = controller_utils.get_recording_stem().parent

    # We don't want to rely on the recordings going into a directory which only
    # contains recording data, so instead we copy explicitly the things which we
    # know will have been output.
    # In the event of an error, recordings won't exist
    if recording_dir.is_dir():
        for path in recording_dir.glob('*'):
            shutil.copy(path, output_dir)

    textures_dir = recording_dir / 'textures'

    # If we don't have textures, the directory won't exist.
    if textures_dir.is_dir():
        shutil.copytree(textures_dir, output_dir / 'textures')


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser()
    parser.add_argument(
        'code_dir',
        help=(
            "The directory containing the teams' robot code. This directory "
            "will also be used as the root for storing the resulting logs and "
            "recordings."
        ),
        type=Path,
    )
    parser.add_argument(
        '--duration',
        help="The duration of the match (in seconds).",
        type=int,
        default=controller_utils.GAME_DURATION_SECONDS,
    )
    return parser.parse_args()


def main(args: argparse.Namespace) -> None:
    with temporary_arena_root(controller_utils.get_filename_safe_identifier()):
        prepare_match(args.code_dir)

        completed_match = run_match()

        archive_match_outputs(args.code_dir, completed_match)

        exit(completed_match.returncode)  # Cascade exit code


if __name__ == '__main__':
    main(parse_args())
